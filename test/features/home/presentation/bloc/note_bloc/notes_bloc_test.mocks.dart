// Mocks generated by Mockito 5.4.5 from annotations
// in imagine_notes/test/features/home/presentation/bloc/note_bloc/notes_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:imagine_notes/features/home/data/home_repository.dart' as _i2;
import 'package:imagine_notes/features/home/domain/category.dart' as _i5;
import 'package:imagine_notes/features/home/domain/note.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [HomeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRepository extends _i1.Mock implements _i2.HomeRepository {
  MockHomeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> createNote(_i4.Note? note) =>
      (super.noSuchMethod(
            Invocation.method(#createNote, [note]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateNote(_i4.Note? note) =>
      (super.noSuchMethod(
            Invocation.method(#updateNote, [note]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteNote(String? noteId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteNote, [noteId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Stream<List<_i4.Note>> getNotesStream({String? categoryId}) =>
      (super.noSuchMethod(
            Invocation.method(#getNotesStream, [], {#categoryId: categoryId}),
            returnValue: _i3.Stream<List<_i4.Note>>.empty(),
          )
          as _i3.Stream<List<_i4.Note>>);

  @override
  _i3.Stream<List<_i5.Category>> getCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getCategories, []),
            returnValue: _i3.Stream<List<_i5.Category>>.empty(),
          )
          as _i3.Stream<List<_i5.Category>>);
}
